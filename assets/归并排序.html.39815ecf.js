import{o as a,a as p,b as t,F as e,c as n}from"./app.4ee60a11.js";import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";const c={},u=n('<h2 id="\u601D\u60F3" tabindex="-1"><a class="header-anchor" href="#\u601D\u60F3" aria-hidden="true">#</a> \u601D\u60F3</h2><p>\u5229\u7528<code>\u5F52\u5E76</code>\u7684\u601D\u60F3\u5B9E\u73B0\u7684\u6392\u5E8F\u65B9\u6CD5\u3002</p><p>\u8BE5\u7B97\u6CD5\u662F\u91C7\u7528\u5206\u6CBB\u6CD5\uFF08<code>Divide and Conquer</code>\uFF09\u7684\u4E00\u4E2A\u975E\u5E38\u5178\u578B\u7684\u5E94\u7528\u3002\uFF08\u5206\u6CBB\u6CD5\u5C06\u95EE\u9898\u5206\u6210\u4E00\u4E9B\u5C0F\u7684\u95EE\u9898\u7136\u540E\u9012\u5F52\u6C42\u89E3\uFF0C\u800C\u6CBB\u7684\u9636\u6BB5\u5219\u5C06\u5206\u7684\u9636\u6BB5\u5F97\u5230\u7684\u5404\u7B54\u6848&quot;\u4FEE\u8865&quot;\u5728\u4E00\u8D77\uFF0C\u5373\u5206\u800C\u6CBB\u4E4B)\u3002</p><ul><li><p>\u5C06\u5DF2\u6709\u5E8F\u7684\u5B50\u5E8F\u5217\u5408\u5E76\uFF0C\u5F97\u5230\u5B8C\u5168\u6709\u5E8F\u7684\u5E8F\u5217</p></li><li><p>\u5373\u5148\u4F7F\u6BCF\u4E2A\u5B50\u5E8F\u5217\u6709\u5E8F\uFF0C\u518D\u4F7F\u5B50\u5E8F\u5217\u6BB5\u95F4\u6709\u5E8F</p></li><li><p>\u82E5\u5C06\u4E24\u4E2A\u6709\u5E8F\u8868\u5408\u5E76\u6210\u4E00\u4E2A\u6709\u5E8F\u8868\uFF0C\u79F0\u4E3A\u4E8C\u8DEF\u5F52\u5E76</p></li></ul>',4),l=["src"],r=n(`<p>\u5206\u5272\uFF1A</p><ul><li><p>\u5C06\u6570\u7EC4\u4ECE\u4E2D\u70B9\u8FDB\u884C\u5206\u5272\uFF0C\u5206\u4E3A\u5DE6\u3001\u53F3\u4E24\u4E2A\u6570\u7EC4</p></li><li><p>\u9012\u5F52\u5206\u5272\u5DE6\u3001\u53F3\u6570\u7EC4\uFF0C\u76F4\u5230\u6570\u7EC4\u957F\u5EA6\u5C0F\u4E8E<code>2</code></p></li></ul><p>\u5F52\u5E76\uFF1A</p><p>\u5982\u679C\u9700\u8981\u5408\u5E76\uFF0C\u90A3\u4E48\u5DE6\u53F3\u4E24\u6570\u7EC4\u5DF2\u7ECF\u6709\u5E8F\u4E86\u3002</p><p>\u521B\u5EFA\u4E00\u4E2A\u4E34\u65F6\u5B58\u50A8\u6570\u7EC4<code>temp</code>\uFF0C\u6BD4\u8F83\u4E24\u6570\u7EC4\u7B2C\u4E00\u4E2A\u5143\u7D20\uFF0C\u5C06\u8F83\u5C0F\u7684\u5143\u7D20\u52A0\u5165\u4E34\u65F6\u6570\u7EC4</p><p>\u82E5\u5DE6\u53F3\u6570\u7EC4\u6709\u4E00\u4E2A\u4E3A\u7A7A\uFF0C\u90A3\u4E48\u6B64\u65F6\u53E6\u4E00\u4E2A\u6570\u7EC4\u4E00\u5B9A\u5927\u4E8E<code>temp</code>\u4E2D\u7684\u6240\u6709\u5143\u7D20\uFF0C\u76F4\u63A5\u5C06\u5176\u6240\u6709\u5143\u7D20\u52A0\u5165<code>temp</code></p><h2 id="\u89E3\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5" aria-hidden="true">#</a> \u89E3\u6CD5</h2><h3 id="\u5199\u6CD51" tabindex="-1"><a class="header-anchor" href="#\u5199\u6CD51" aria-hidden="true">#</a> \u5199\u6CD51</h3><p>\u5206\u5272\u6570\u7EC4\u65F6\u76F4\u63A5\u5C06\u6570\u7EC4\u5206\u5272\u4E3A\u4E24\u4E2A\u6570\u7EC4\uFF0C\u5408\u5E76\u65F6\u76F4\u63A5\u5408\u5E76\u6570\u7EC4\u3002</p><p>\u4F18\u70B9\uFF1A\u601D\u8DEF\u7B80\u5355\uFF0C\u5199\u6CD5\u7B80\u5355</p><p>\u7F3A\u70B9\uFF1A\u7A7A\u95F4\u590D\u6742\u5EA6\u7565\u9AD8\uFF0C\u9700\u8981\u590D\u5236\u591A\u4E2A\u6570\u7EC4</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> front <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">front<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>front<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="\u5199\u6CD52" tabindex="-1"><a class="header-anchor" href="#\u5199\u6CD52" aria-hidden="true">#</a> \u5199\u6CD52</h3><p>\u8BB0\u5F55\u6570\u7EC4\u7684\u7D22\u5F15\uFF0C\u4F7F\u7528<code>left\u3001right</code>\u4E24\u4E2A\u7D22\u5F15\u6765\u9650\u5B9A\u5F53\u524D\u5206\u5272\u7684\u6570\u7EC4\u3002</p><p>\u4F18\u70B9\uFF1A\u7A7A\u95F4\u590D\u6742\u5EA6\u4F4E\uFF0C\u53EA\u9700\u4E00\u4E2A<code>temp</code>\u5B58\u50A8\u7A7A\u95F4\uFF0C\u4E0D\u9700\u8981\u62F7\u8D1D\u6570\u7EC4</p><p>\u7F3A\u70B9\uFF1A\u5199\u6CD5\u590D\u6742</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
        <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
        <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> leftIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>
      <span class="token keyword">let</span> rightIndex <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> tempIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> rightIndex <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">++</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">++</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">++</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>rightIndex <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">++</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
      tempIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="\u590D\u6742\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u590D\u6742\u5EA6" aria-hidden="true">#</a> \u590D\u6742\u5EA6</h2><p>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1A<code>O(nlogn)</code></p><p>\u7A7A\u95F4\u590D\u6742\u5EA6:<code>O(n)</code></p><h2 id="\u7A33\u5B9A\u6027" tabindex="-1"><a class="header-anchor" href="#\u7A33\u5B9A\u6027" aria-hidden="true">#</a> \u7A33\u5B9A\u6027</h2><p>\u7A33\u5B9A</p>`,22);function i(s,k){return a(),p(e,null,[u,t("img",{src:s.$withBase("/\u5F52\u5E76\u6392\u5E8F.png"),alt:"foo"},null,8,l),r],64)}var m=o(c,[["render",i]]);export{m as default};
