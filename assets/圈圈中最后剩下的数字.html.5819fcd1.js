import{o as p,a as t,b as n,F as e,d as s,c as o}from"./app.4ee60a11.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const l={},u=n("h2",{id:"\u9898\u76EE",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898\u76EE","aria-hidden":"true"},"#"),s(" \u9898\u76EE")],-1),r=n("p",null,[n("code",null,"0,1,...,n-1"),s("\u8FD9"),n("code",null,"n"),s("\u4E2A\u6570\u5B57\u6392\u6210\u4E00\u4E2A\u5706\u5708\uFF0C\u4ECE\u6570\u5B570\u5F00\u59CB\uFF0C\u6BCF\u6B21\u4ECE\u8FD9\u4E2A\u5706\u5708\u91CC\u5220\u9664\u7B2C"),n("code",null,"m"),s("\u4E2A\u6570\u5B57\u3002\u6C42\u51FA\u8FD9\u4E2A\u5706\u5708\u91CC\u5269\u4E0B\u7684\u6700\u540E\u4E00\u4E2A\u6570\u5B57\u3002")],-1),i=n("p",null,"\u5176\u5B9E\u8FD9\u5C31\u662F\u8457\u540D\u7684\u7EA6\u745F\u592B\u73AF\u95EE\u9898\uFF0C\u4E0B\u9762\u662F\u8FD9\u4E2A\u95EE\u9898\u4EA7\u751F\u7684\u80CC\u666F\uFF0C\u4E00\u4E2A\u6709\u8DA3\u7684\u6545\u4E8B\uFF1A",-1),k=n("blockquote",null,[n("p",null,"\u636E\u8BF4\u8457\u540D\u72B9\u592A\u5386\u53F2\u5B66\u5BB6 Josephus\u6709\u8FC7\u4EE5\u4E0B\u7684\u6545\u4E8B\uFF1A\u5728\u7F57\u9A6C\u4EBA\u5360\u9886\u4E54\u5854\u5E15\u7279\u540E\uFF0C39 \u4E2A\u72B9\u592A\u4EBA\u4E0EJosephus\u53CA\u4ED6\u7684\u670B\u53CB\u8EB2\u5230\u4E00\u4E2A\u6D1E\u4E2D\uFF0C39\u4E2A\u72B9\u592A\u4EBA\u51B3\u5B9A\u5B81\u613F\u6B7B\u4E5F\u4E0D\u8981\u88AB\u654C\u4EBA\u6293\u5230\uFF0C\u4E8E\u662F\u51B3\u5B9A\u4E86\u4E00\u4E2A\u81EA\u6740\u65B9\u5F0F\uFF0C41\u4E2A\u4EBA\u6392\u6210\u4E00\u4E2A\u5706\u5708\uFF0C\u7531\u7B2C1\u4E2A\u4EBA\u5F00\u59CB\u62A5\u6570\uFF0C\u6BCF\u62A5\u6570\u5230\u7B2C3\u4EBA\u8BE5\u4EBA\u5C31\u5FC5\u987B\u81EA\u6740\uFF0C\u7136\u540E\u518D\u7531\u4E0B\u4E00\u4E2A\u91CD\u65B0\u62A5\u6570\uFF0C\u76F4\u5230\u6240\u6709\u4EBA\u90FD\u81EA\u6740\u8EAB\u4EA1\u4E3A\u6B62\u3002\u7136\u800CJosephus \u548C\u4ED6\u7684\u670B\u53CB\u5E76\u4E0D\u60F3\u9075\u4ECE\u3002\u9996\u5148\u4ECE\u4E00\u4E2A\u4EBA\u5F00\u59CB\uFF0C\u8D8A\u8FC7k-2\u4E2A\u4EBA\uFF08\u56E0\u4E3A\u7B2C\u4E00\u4E2A\u4EBA\u5DF2\u7ECF\u88AB\u8D8A\u8FC7\uFF09\uFF0C\u5E76\u6740\u6389\u7B2Ck\u4E2A\u4EBA\u3002\u63A5\u7740\uFF0C\u518D\u8D8A\u8FC7k-1\u4E2A\u4EBA\uFF0C\u5E76\u6740\u6389\u7B2Ck\u4E2A\u4EBA\u3002\u8FD9\u4E2A\u8FC7\u7A0B\u6CBF\u7740\u5706\u5708\u4E00\u76F4\u8FDB\u884C\uFF0C\u76F4\u5230\u6700\u7EC8\u53EA\u5269\u4E0B\u4E00\u4E2A\u4EBA\u7559\u4E0B\uFF0C\u8FD9\u4E2A\u4EBA\u5C31\u53EF\u4EE5\u7EE7\u7EED\u6D3B\u7740\u3002\u95EE\u9898\u662F\uFF0C\u7ED9\u5B9A\u4E86\u548C\uFF0C\u4E00\u5F00\u59CB\u8981\u7AD9\u5728\u4EC0\u4E48\u5730\u65B9\u624D\u80FD\u907F\u514D\u88AB\u5904\u51B3\uFF1FJosephus\u8981\u4ED6\u7684\u670B\u53CB\u5148\u5047\u88C5\u9075\u4ECE\uFF0C\u4ED6\u5C06\u670B\u53CB\u4E0E\u81EA\u5DF1\u5B89\u6392\u5728\u7B2C16\u4E2A\u4E0E\u7B2C31\u4E2A\u4F4D\u7F6E\uFF0C\u4E8E\u662F\u9003\u8FC7\u4E86\u8FD9\u573A\u6B7B\u4EA1\u6E38\u620F\u3002")],-1),b=["src"],m=o(`<h2 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h2><p><strong>\u89E3\u6CD51:\u7528\u94FE\u8868\u6A21\u62DF\u73AF</strong></p><ul><li><p>\u7528\u94FE\u8868\u6A21\u62DF\u4E00\u4E2A\u73AF</p></li><li><p>\u6A21\u62DF\u6E38\u620F\u573A\u666F</p></li><li><p>\u8BB0\u5F55\u5934\u8282\u70B9\u7684\u524D\u4E00\u4E2A\u8282\u70B9<code>current</code>\uFF0C\u4EE5\u4FDD\u8BC1\u6211\u4EEC\u627E\u5230\u7684\u8981\u5220\u9664\u7684\u8282\u70B9\u662F<code>current.next</code></p></li><li><p>\u6BCF\u6B21\u5FAA\u73AFm\u6B21\u627E\u5230\u76EE\u6807\u8282\u70B9\u5220\u9664\uFF0C\u76F4\u5230\u94FE\u8868\u53EA\u5269\u4E0B\u4E00\u4E2A\u8282\u70B9</p></li><li><p>\u65F6\u95F4\u590D\u6742\u5EA6<code>O(m*n)</code> \u7A7A\u95F4\u590D\u6742\u5EA6<code>O(n)</code></p></li></ul><p><strong>\u89E3\u6CD52:\u7528\u6570\u7EC4\u6A21\u62DF</strong></p><ul><li>\u6BCF\u6B21\u8BA1\u7B97\u4E0B\u6807\uFF0C\u9700\u8981\u8003\u8651\u672B\u5C3E\u6761\u4EF6</li></ul><p><strong>\u89E3\u6CD53:\u6570\u5B66\u63A8\u5BFC</strong></p><ul><li><code>f(n) = (f(n-1)+m)%n</code> \u5373 <code>f(n,m) = (f(n-1,m)+m)%n</code></li><li>\u4F7F\u7528\u9012\u5F52\u6C42\u89E3 \u8FB9\u754C\u6761\u4EF6\u4E3A <code>n=1</code></li></ul><p>\u65F6\u95F4\u590D\u6742\u5EA6 <code>1&gt;2&gt;3</code></p><p>\u6613\u7406\u89E3\u7A0B\u5EA6 <code>1&gt;2&gt;3</code></p><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">// \u89E3\u6CD51</span>
    <span class="token keyword">function</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">val</span><span class="token operator">:</span> i <span class="token punctuation">}</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      current<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        current<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">// \u89E3\u6CD52</span>
    <span class="token keyword">function</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">// \u89E3\u6CD53</span>
    <span class="token keyword">function</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">joseoh</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">joseoh</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">joseoh</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,13);function d(a,y){return p(),t(e,null,[u,r,i,k,n("img",{src:a.$withBase("/yuesefu.jpg"),alt:"foo"},null,8,b),m],64)}var _=c(l,[["render",d]]);export{_ as default};
