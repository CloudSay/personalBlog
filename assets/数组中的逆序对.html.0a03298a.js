import{r as p,o as t,a as e,b as n,e as o,F as c,d as s,c as l}from"./app.4ee60a11.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("h2",{id:"\u9898\u76EE",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898\u76EE","aria-hidden":"true"},"#"),s(" \u9898\u76EE")],-1),k=n("p",null,"\u5728\u6570\u7EC4\u4E2D\u7684\u4E24\u4E2A\u6570\u5B57\uFF0C\u5982\u679C\u524D\u9762\u4E00\u4E2A\u6570\u5B57\u5927\u4E8E\u540E\u9762\u7684\u6570\u5B57\uFF0C\u5219\u8FD9\u4E24\u4E2A\u6570\u5B57\u7EC4\u6210\u4E00\u4E2A\u9006\u5E8F\u5BF9\u3002\u8F93\u5165\u4E00\u4E2A\u6570\u7EC4,\u6C42\u51FA\u8FD9\u4E2A\u6570\u7EC4\u4E2D\u7684\u9006\u5E8F\u5BF9\u7684\u603B\u6570P\u3002",-1),d=n("h2",{id:"\u601D\u8DEF",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u601D\u8DEF","aria-hidden":"true"},"#"),s(" \u601D\u8DEF")],-1),m=n("p",null,[s("\u4F7F\u7528\u66B4\u529B\u6CD5\uFF1A\u4ECE\u7B2C\u4E00\u4E2A\u6570\u5F00\u59CB\uFF0C\u4F9D\u6B21\u548C\u540E\u9762\u6BCF\u4E00\u4E2A\u6570\u5B57\u8FDB\u884C\u6BD4\u8F83\u8BB0\u5F55\u9006\u5E8F\u5BF9\u7684\u4E2A\u6570\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6O(n"),n("sup",null,"2"),s(")")],-1),b=n("p",null,"\u4F7F\u7528\u5206\u6CBB\u7684\u7EC6\u60F3\uFF1A",-1),h=s("\u82E5\u6CA1\u4E86\u89E3\u8FC7\u5F52\u5E76\u6392\u5E8F\uFF0C\u5EFA\u8BAE\u5148\u719F\u6089"),f={href:"/%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.md",target:"_blank",rel:"noopener noreferrer"},g=s("\u5F52\u5E76\u6392\u5E8F"),_=s("\u7B97\u6CD5\u518D\u6765\u770B\u672C\u9898\u3002"),y=l(`<p>\u76F4\u63A5\u5C06\u5F52\u5E76\u6392\u5E8F\u8FDB\u884C\u6539\u8FDB\uFF0C\u628A\u6570\u636E\u5206\u6210<code>N</code>\u4E2A\u5C0F\u6570\u7EC4\u3002</p><p>\u5408\u5E76\u6570\u7EC4 <code>left - mid</code> , <code>mid+1 - right</code>\uFF0C\u5408\u5E76\u65F6\uFF0C \u82E5<code>array[leftIndex] &gt; array[rightIndex]</code> ,\u5219\u6BD4\u53F3\u8FB9 <code>rightIndex-mid</code>\u4E2A\u6570\u5927</p><p><code>count += rightIndex-mid</code></p><p>\u6CE8\u610F\u548C\u5F52\u5E76\u6392\u5E8F\u7684\u533A\u522B\uFF1A \u5F52\u5E76\u6392\u5E8F\u662F\u5408\u5E76\u6570\u7EC4\u6570\u4ECE\u5C0F\u6570\u5F00\u59CB\uFF0C\u800C\u672C\u9898\u662F\u4ECE\u5927\u6570\u5F00\u59CB\u3002</p><p>\u65F6\u95F4\u590D\u6742\u5EA6<code>O(nlogn)</code></p><p>\u7A7A\u95F4\u590D\u6742\u5EA6<code>O(n)</code></p><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l <span class="token operator">+</span> m <span class="token operator">+</span> r<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> leftIndex <span class="token operator">=</span> mid<span class="token punctuation">;</span>
      <span class="token keyword">let</span> rightIndex <span class="token operator">=</span> right<span class="token punctuation">;</span>
      <span class="token keyword">let</span> tempIndex <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&gt;=</span> left <span class="token operator">&amp;&amp;</span> rightIndex <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          count <span class="token operator">+=</span> <span class="token punctuation">(</span>rightIndex <span class="token operator">-</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
          temp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          temp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>leftIndex <span class="token operator">&gt;=</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>leftIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>rightIndex <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>tempIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>rightIndex<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      tempIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>tempIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="\u8003\u5BDF\u70B9" tabindex="-1"><a class="header-anchor" href="#\u8003\u5BDF\u70B9" aria-hidden="true">#</a> \u8003\u5BDF\u70B9</h2><ul><li>\u6570\u7EC4</li><li>\u5206\u6CBB</li></ul>`,10);function x(I,w){const a=p("ExternalLinkIcon");return t(),e(c,null,[i,k,d,m,b,n("p",null,[h,n("a",f,[g,o(a)]),_]),y],64)}var v=r(u,[["render",x]]);export{v as default};
