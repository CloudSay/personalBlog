import{c as n}from"./app.4ee60a11.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h2 id="\u9898\u76EE" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a> \u9898\u76EE</h2><p>\u8F93\u5165\u4E00\u4E2A\u6574\u578B\u6570\u7EC4\uFF0C\u6570\u7EC4\u91CC\u6709\u6B63\u6570\u4E5F\u6709\u8D1F\u6570\u3002\u6570\u7EC4\u4E2D\u7684\u4E00\u4E2A\u6216\u8FDE\u7EED\u591A\u4E2A\u6574\u6570\u7EC4\u6210\u4E00\u4E2A\u5B50\u6570\u7EC4\u3002\u6C42\u6240\u6709\u5B50\u6570\u7EC4\u7684\u548C\u7684\u6700\u5927\u503C\uFF0C\u8981\u6C42\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A<code>O(n)</code></p><p>\u4F8B\u5982:<code>{6,-3,-2,7,-15,1,2,2}</code>,\u8FDE\u7EED\u5B50\u5411\u91CF\u7684\u6700\u5927\u548C\u4E3A8(\u4ECE\u7B2C0\u4E2A\u5F00\u59CB,\u5230\u7B2C3\u4E2A\u4E3A\u6B62)\u3002</p><h2 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h2><p>\u8BB0\u5F55\u4E00\u4E2A\u5F53\u524D\u8FDE\u7EED\u5B50\u6570\u7EC4\u6700\u5927\u503C <code>max</code> \u9ED8\u8BA4\u503C\u4E3A\u6570\u7EC4\u7B2C\u4E00\u9879</p><p>\u8BB0\u5F55\u4E00\u4E2A\u5F53\u524D\u8FDE\u7EED\u5B50\u6570\u7EC4\u7D2F\u52A0\u503C <code>sum</code> \u9ED8\u8BA4\u503C\u4E3A\u6570\u7EC4\u7B2C\u4E00\u9879</p><p>1.\u4ECE\u6570\u7EC4\u7B2C\u4E8C\u4E2A\u6570\u5F00\u59CB\uFF0C\u82E5 <code>sum&lt;0</code> \u5219\u5F53\u524D\u7684<code>sum</code>\u4E0D\u518D\u5BF9\u540E\u9762\u7684\u7D2F\u52A0\u6709\u8D21\u732E\uFF0C<code>sum = \u5F53\u524D\u6570</code></p><p>2.\u82E5 <code>sum&gt;0</code> \u5219<code>sum = sum + \u5F53\u524D\u6570</code></p><p>3.\u6BD4\u8F83 <code>sum</code> \u548C <code>max</code> \uFF0C<code>max = \u4E24\u8005\u6700\u5927\u503C</code></p><h2 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> sum <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> sum <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> sum<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,11);function e(t,o){return p}var u=s(a,[["render",e]]);export{u as default};
